import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:flutter_slchess/main.dart';
import './user_service.dart';
import './puzzle_service.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:url_launcher/url_launcher.dart';

// Enum ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
enum AuthState {
  initial,
  loading,
  authenticated,
  unauthenticated,
  error,
  cancelled
}

class AmplifyAuthService {
  static final AmplifyAuthService _instance = AmplifyAuthService._internal();
  final FlutterSecureStorage _storage = const FlutterSecureStorage();
  final UserService _userService = UserService();
  final PuzzleService _puzzleService = PuzzleService();
  bool _isInitialized = false;

  // Stream controller ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  final _authStateController = StreamController<AuthState>.broadcast();
  Stream<AuthState> get authStateStream => _authStateController.stream;

  // Bi·∫øn ƒë·ªÉ theo d√µi s·ªë l·∫ßn retry
  int _retryCount = 0;
  static const int maxRetries = 3;

  // Bi·∫øn ƒë·ªÉ theo d√µi URL callback
  String? _pendingCallbackUrl;

  // Timer ƒë·ªÉ refresh token
  Timer? _refreshTokenTimer;

  // Constants cho secure storage
  static const String ACCESS_TOKEN_KEY = "ACCESS_TOKEN";
  static const String ID_TOKEN_KEY = "ID_TOKEN";
  static const String REFRESH_TOKEN_KEY = "REFRESH_TOKEN";

  factory AmplifyAuthService() {
    return _instance;
  }

  AmplifyAuthService._internal();

  Future<void> initializeAmplify() async {
    if (_isInitialized) {
      safePrint('Amplify ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥, b·ªè qua');
      return;
    }

    try {
      // Ki·ªÉm tra xem Amplify ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ch∆∞a
      bool needConfiguration = !Amplify.isConfigured;

      // Th√™m Auth plugin - lu√¥n th·ª≠ th√™m tr∆∞·ªõc khi c·∫•u h√¨nh
      final auth = AmplifyAuthCognito();
      bool pluginAdded = false;

      try {
        if (!Amplify.isConfigured) {
          await Amplify.addPlugin(auth);
          pluginAdded = true;
          safePrint('ƒê√£ th√™m Auth plugin th√†nh c√¥ng');
        } else {
          // ƒê·ªëi v·ªõi Amplify ƒë√£ c·∫•u h√¨nh, ki·ªÉm tra n·∫øu Auth plugin ƒë√£ ƒë∆∞·ª£c th√™m
          try {
            // Th·ª≠ g·ªçi m·ªôt API c·ªßa Auth ƒë·ªÉ ki·ªÉm tra n·∫øu plugin ƒë√£ ƒë∆∞·ª£c th√™m
            await Amplify.Auth.fetchAuthSession();
            pluginAdded = true;
            safePrint('Auth plugin ƒë√£ t·ªìn t·∫°i');
          } catch (e) {
            if (e.toString().contains('Auth plugin has not been added')) {
              safePrint(
                  'L·ªói: Auth plugin ch∆∞a ƒë∆∞·ª£c th√™m v√†o Amplify ƒë√£ c·∫•u h√¨nh');
              // Kh√¥ng th·ªÉ th√™m plugin v√†o Amplify ƒë√£ c·∫•u h√¨nh
              // C·∫ßn reset Amplify ho·∫∑c kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
              throw Exception(
                  'Kh√¥ng th·ªÉ th√™m Auth plugin v√†o Amplify ƒë√£ c·∫•u h√¨nh. C·∫ßn kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.');
            } else {
              // L·ªói kh√°c khi ki·ªÉm tra Auth plugin
              rethrow;
            }
          }
        }
      } catch (e) {
        if (e.toString().contains('has already been added')) {
          safePrint('Auth plugin ƒë√£ ƒë∆∞·ª£c th√™m tr∆∞·ªõc ƒë√≥');
          pluginAdded = true;
        } else if (!e.toString().contains('Kh√¥ng th·ªÉ th√™m Auth plugin')) {
          // N·∫øu kh√¥ng ph·∫£i l·ªói "kh√¥ng th·ªÉ th√™m plugin", n√©m l·∫°i l·ªói
          rethrow;
        }
      }

      // N·∫øu plugin ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng v√† c·∫ßn c·∫•u h√¨nh
      if (pluginAdded && needConfiguration) {
        // L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ .env
        final cognitoUrl = dotenv.env['COGNITO_URL'];
        final cognitoClientId = dotenv.env['COGNITO_CLIENT_ID'];

        if (cognitoUrl == null || cognitoClientId == null) {
          throw Exception('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Cognito trong file .env');
        }

        // Tr√≠ch xu·∫•t region t·ª´ URL Cognito
        String region = 'ap-southeast-2'; // M·∫∑c ƒë·ªãnh
        final regionRegex = RegExp(r'auth\.([a-z0-9-]+)\.amazoncognito');
        final regionMatch = regionRegex.firstMatch(cognitoUrl);
        if (regionMatch != null && regionMatch.groupCount >= 1) {
          region = regionMatch.group(1) ?? region;
        }

        // T·∫°o User Pool ID t·ª´ URL v√† region
        final domainParts = cognitoUrl.split('.');
        String userPoolId = "";
        if (domainParts.isNotEmpty) {
          userPoolId = "${region}_${domainParts[0]}";
        } else {
          throw Exception('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh User Pool ID t·ª´ Cognito URL');
        }

        // Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n chuy·ªÉn h∆∞·ªõng ph√π h·ª£p v·ªõi n·ªÅn t·∫£ng
        String signInRedirectURI;
        String signOutRedirectURI;

        if (kIsWeb) {
          // Web
          signInRedirectURI = '${Uri.base.origin}/callback';
          signOutRedirectURI = '${Uri.base.origin}/signout';
        } else {
          // Mobile
          signInRedirectURI = 'slchess://callback/';
          signOutRedirectURI = 'slchess://signout/';
        }

        // C·∫•u h√¨nh JSON cho Amplify
        final jsonConfig = {
          "UserAgent": "aws-amplify-cli/2.0",
          "Version": "1.0",
          "auth": {
            "plugins": {
              "awsCognitoAuthPlugin": {
                "UserAgent": "aws-amplify/cli",
                "Version": "0.1.0",
                "IdentityManager": {"Default": {}},
                "CognitoUserPool": {
                  "Default": {
                    "PoolId": userPoolId,
                    "AppClientId": cognitoClientId,
                    "Region": region
                  }
                },
                "Auth": {
                  "Default": {
                    "authenticationFlowType": "USER_SRP_AUTH",
                    "OAuth": {
                      "WebDomain": cognitoUrl,
                      "AppClientId": cognitoClientId,
                      "SignInRedirectURI": signInRedirectURI,
                      "SignOutRedirectURI": signOutRedirectURI,
                      "Scopes": [
                        "email",
                        "openid",
                        "phone",
                        "aws.cognito.signin.user.admin"
                      ]
                    }
                  }
                }
              }
            }
          }
        };

        // In th√¥ng tin c·∫•u h√¨nh scopes
        final scopes = (jsonConfig["auth"] as Map)["plugins"] as Map;
        final cognitoPlugin = scopes["awsCognitoAuthPlugin"] as Map;
        final authConfig = cognitoPlugin["Auth"] as Map;
        final defaultAuth = authConfig["Default"] as Map;
        final oauth = defaultAuth["OAuth"] as Map;
        final configuredScopes = oauth["Scopes"] as List;
        safePrint('ƒê√£ c·∫•u h√¨nh Amplify v·ªõi c√°c scopes: $configuredScopes');

        try {
          // C·ªë g·∫Øng c·∫•u h√¨nh Amplify
          await Amplify.configure(jsonEncode(jsonConfig));
          safePrint('ƒê√£ c·∫•u h√¨nh Amplify th√†nh c√¥ng');

          // Ki·ªÉm tra xem Auth plugin c√≥ ho·∫°t ƒë·ªông kh√¥ng
          try {
            await Amplify.Auth.fetchAuthSession();
            safePrint('Auth plugin ho·∫°t ƒë·ªông t·ªët');
          } catch (e) {
            safePrint('L·ªói khi ki·ªÉm tra Auth plugin: $e');
            throw Exception('Auth plugin kh√¥ng ho·∫°t ƒë·ªông sau khi c·∫•u h√¨nh: $e');
          }
        } catch (e) {
          if (e.toString().contains('already been configured')) {
            safePrint(
                'Amplify ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥, ƒë√°nh d·∫•u l√† ƒë√£ kh·ªüi t·∫°o');
          } else {
            rethrow;
          }
        }
      } else if (!pluginAdded) {
        throw Exception('Kh√¥ng th·ªÉ th√™m Auth plugin v√†o Amplify');
      } else if (Amplify.isConfigured) {
        safePrint('Amplify ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh, kh√¥ng c·∫ßn c·∫•u h√¨nh l·∫°i');
      }

      _isInitialized = true;
      safePrint('Amplify ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng üéâ');
    } on AmplifyException catch (e) {
      safePrint('L·ªói AmplifyException khi kh·ªüi t·∫°o Amplify: ${e.message}');
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói "ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh" kh√¥ng
      if (e.message.contains('already been configured')) {
        _isInitialized = true;
        safePrint('ƒê√°nh d·∫•u Amplify ƒë√£ kh·ªüi t·∫°o do ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥');
        return; // Kh√¥ng n√©m exception n·∫øu ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
      }
      throw Exception(
          'L·ªói AmplifyException khi kh·ªüi t·∫°o Amplify: ${e.message}');
    } catch (e) {
      safePrint('L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi t·∫°o Amplify: $e');
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói "ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh" kh√¥ng
      if (e.toString().contains('already been configured')) {
        _isInitialized = true;
        safePrint('ƒê√°nh d·∫•u Amplify ƒë√£ kh·ªüi t·∫°o do ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥');
        return; // Kh√¥ng n√©m exception n·∫øu ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
      }
      throw Exception('L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi t·∫°o Amplify: $e');
    }
  }

  // Ph∆∞∆°ng th·ª©c public ƒë·ªÉ truy c·∫≠p t·ª´ b√™n ngo√†i
  Future<void> fetchAndSaveUserInfo() async {
    return _fetchAndSaveUserInfo();
  }

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng sau khi ƒëƒÉng nh·∫≠p
  Future<void> _fetchAndSaveUserInfo() async {
    try {
      // Ki·ªÉm tra session tr∆∞·ªõc
      final session =
          await Amplify.Auth.fetchAuthSession() as CognitoAuthSession;

      if (!session.isSignedIn) {
        safePrint("Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p");
        if (navigatorKey.currentContext != null) {
          Navigator.pushNamedAndRemoveUntil(
            navigatorKey.currentContext!,
            '/login',
            (route) => false,
          );
        }
        return;
      }

      // L·∫•y token t·ª´ Cognito
      final tokens = session.userPoolTokensResult.value;

      // L·∫•y token g·ªëc t·ª´ ƒë·ªëi t∆∞·ª£ng JWT
      String? accessTokenStr = tokens.accessToken.raw;
      String? idTokenStr = tokens.idToken.raw;
      String? refreshTokenStr = tokens.refreshToken;

      // Ki·ªÉm tra token h·∫øt h·∫°n
      if (await isTokenExpired(accessTokenStr)) {
        safePrint("Token ƒë√£ h·∫øt h·∫°n, chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p");
        if (navigatorKey.currentContext != null) {
          Navigator.pushNamedAndRemoveUntil(
            navigatorKey.currentContext!,
            '/login',
            (route) => false,
          );
        }
        return;
      }

      // L∆∞u token v√†o secure storage
      await _storage.write(key: ACCESS_TOKEN_KEY, value: accessTokenStr);
      await _storage.write(key: ID_TOKEN_KEY, value: idTokenStr);
      await _storage.write(key: REFRESH_TOKEN_KEY, value: refreshTokenStr);

      safePrint("ƒê√£ l∆∞u c√°c token th√†nh c√¥ng");

      // Debug: in ra m·ªôt ph·∫ßn c·ªßa token ƒë·ªÉ ki·ªÉm tra
      safePrint(
          "Access Token (partial): ${accessTokenStr.substring(0, 20)}...");
      safePrint("ID Token (partial): ${idTokenStr.substring(0, 20)}...");

      // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng b·∫±ng access token
      await _userService.saveSelfUserInfo(accessTokenStr, idTokenStr);

      // Sau khi l∆∞u th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng, m·ªõi x√≥a cache puzzle
      await _puzzleService.clearAllPuzzleCaches();
    } catch (e) {
      safePrint("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: $e");
      // N·∫øu c√≥ l·ªói, chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
      if (navigatorKey.currentContext != null) {
        Navigator.pushNamedAndRemoveUntil(
          navigatorKey.currentContext!,
          '/login',
          (route) => false,
        );
      }
    }
  }

  // Ki·ªÉm tra xem token ƒë√£ h·∫øt h·∫°n ch∆∞a
  Future<bool> isTokenExpired(String token) async {
    try {
      // Ph√¢n t√≠ch token JWT
      final parts = token.split('.');
      if (parts.length != 3) {
        safePrint('Token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JWT');
        return true; // Coi nh∆∞ token ƒë√£ h·∫øt h·∫°n n·∫øu sai ƒë·ªãnh d·∫°ng
      }

      // Gi·∫£i m√£ ph·∫ßn payload (ph·∫ßn th·ª© 2)
      String normalizedPayload = base64Url.normalize(parts[1]);
      final payloadJson = utf8.decode(base64Url.decode(normalizedPayload));
      final payload = jsonDecode(payloadJson);

      // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
      if (payload.containsKey('exp')) {
        final exp = payload['exp'];
        final expiryDateTime = DateTime.fromMillisecondsSinceEpoch(exp * 1000);
        final currentTime = DateTime.now();

        // Th√™m buffer time 5 ph√∫t ƒë·ªÉ tr√°nh tr∆∞·ªùng h·ª£p token h·∫øt h·∫°n ngay sau khi ki·ªÉm tra
        const bufferTime = Duration(minutes: 5);
        final expiryWithBuffer = expiryDateTime.subtract(bufferTime);

        safePrint('Token h·∫øt h·∫°n v√†o: $expiryDateTime');
        safePrint('Th·ªùi gian hi·ªán t·∫°i: $currentTime');
        safePrint('Th·ªùi gian h·∫øt h·∫°n v·ªõi buffer: $expiryWithBuffer');

        return currentTime.isAfter(expiryWithBuffer);
      } else {
        safePrint('Token kh√¥ng c√≥ th√¥ng tin h·∫øt h·∫°n');
        return true; // Coi nh∆∞ token ƒë√£ h·∫øt h·∫°n n·∫øu kh√¥ng c√≥ th√¥ng tin
      }
    } catch (e) {
      safePrint('L·ªói khi ki·ªÉm tra h·∫°n token: $e');
      return true; // Coi nh∆∞ token ƒë√£ h·∫øt h·∫°n n·∫øu c√≥ l·ªói
    }
  }

  // Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p v·ªõi giao di·ªán Amplify
  Future<void> signIn(BuildContext context) async {
    try {
      // Reset retry count
      _retryCount = 0;

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i loading
      _authStateController.add(AuthState.loading);

      safePrint('B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p v·ªõi WebUI');

      // G·ªçi API ƒë·ªÉ ƒëƒÉng nh·∫≠p
      final response = await Amplify.Auth.signInWithWebUI(
        provider: AuthProvider.cognito,
        options: const SignInWithWebUIOptions(),
      );

      safePrint('K·∫øt qu·∫£ signInWithWebUI: ${response.isSignedIn}');

      if (!response.isSignedIn) {
        throw Exception('ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng');
      }

      safePrint('ƒêƒÉng nh·∫≠p th√†nh c√¥ng, ƒëang l·∫•y session m·ªõi');

      // L·∫•y session m·ªõi sau khi ƒëƒÉng nh·∫≠p
      final session = await Amplify.Auth.fetchAuthSession();
      safePrint('Lo·∫°i session: ${session.runtimeType}');

      if (session is CognitoAuthSession) {
        final tokens = session.userPoolTokensResult.value;

        safePrint('Ki·ªÉm tra token');
        if (tokens.accessToken.raw.isEmpty ||
            tokens.idToken.raw.isEmpty ||
            tokens.refreshToken.isEmpty) {
          safePrint('Token kh√¥ng h·ª£p l·ªá');
          throw Exception('Token kh√¥ng h·ª£p l·ªá sau khi ƒëƒÉng nh·∫≠p');
        }

        safePrint(
            'Access Token: ${tokens.accessToken.raw.substring(0, 20)}...');
        safePrint('ID Token: ${tokens.idToken.raw.substring(0, 20)}...');

        safePrint('B·∫Øt ƒë·∫ßu l∆∞u token');
        // L∆∞u token m·ªõi
        await saveTokens(
            tokens.accessToken.raw, tokens.idToken.raw, tokens.refreshToken);

        safePrint('ƒê√£ l∆∞u token m·ªõi th√†nh c√¥ng');

        safePrint('B·∫Øt ƒë·∫ßu l·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
        // L·∫•y v√† l∆∞u th√¥ng tin ng∆∞·ªùi d√πng
        await _fetchAndSaveUserInfo();

        safePrint('B·∫Øt ƒë·∫ßu refresh token timer');
        // B·∫Øt ƒë·∫ßu refresh token timer
        _startRefreshTokenTimer();

        _authStateController.add(AuthState.authenticated);

        safePrint('Chuy·ªÉn h∆∞·ªõng v·ªÅ m√†n h√¨nh ch√≠nh');
        // Chuy·ªÉn h∆∞·ªõng v·ªÅ m√†n h√¨nh ch√≠nh
        if (navigatorKey.currentContext != null) {
          Navigator.pushNamedAndRemoveUntil(
            navigatorKey.currentContext!,
            '/home',
            (route) => false,
          );
        }
      } else {
        safePrint('Session kh√¥ng ph·∫£i CognitoAuthSession');
        throw Exception('Kh√¥ng th·ªÉ l·∫•y session sau khi ƒëƒÉng nh·∫≠p');
      }
    } catch (e) {
      safePrint('L·ªói khi ƒëƒÉng nh·∫≠p: $e');
      _authStateController.add(AuthState.error);

      // N·∫øu c√≥ l·ªói, ƒëƒÉng xu·∫•t ƒë·ªÉ l√†m s·∫°ch tr·∫°ng th√°i
      await signOut();

      // Chuy·ªÉn h∆∞·ªõng v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      if (navigatorKey.currentContext != null) {
        Navigator.pushNamedAndRemoveUntil(
          navigatorKey.currentContext!,
          '/login',
          (route) => false,
        );
      }
    }
  }

  // X·ª≠ l√Ω callback URL t·ª´ deep link
  Future<void> handleCallbackUrl(String url) async {
    try {
      _pendingCallbackUrl = url;
      _authStateController.add(AuthState.loading);

      // Parse URL ƒë·ªÉ l·∫•y authorization code
      final uri = Uri.parse(url);
      final code = uri.queryParameters['code'];

      if (code == null) {
        throw Exception('Kh√¥ng t√¨m th·∫•y authorization code trong URL');
      }

      safePrint('Nh·∫≠n ƒë∆∞·ª£c authorization code: $code');

      // Exchange code l·∫•y token
      final cognitoUrl = dotenv.env['COGNITO_URL'];
      final cognitoClientId = dotenv.env['COGNITO_CLIENT_ID'];

      if (cognitoUrl == null || cognitoClientId == null) {
        throw Exception('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Cognito');
      }

      // G·ªçi API ƒë·ªÉ exchange code
      final response = await Amplify.Auth.signInWithWebUI(
        provider: AuthProvider.cognito,
        options: const SignInWithWebUIOptions(),
      );

      if (!response.isSignedIn) {
        throw Exception('ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng');
      }

      print("ƒêƒÉng nh·∫≠p th√†nh c√¥ng");

      // L·∫•y session m·ªõi sau khi ƒëƒÉng nh·∫≠p
      final session = await Amplify.Auth.fetchAuthSession();
      if (session is CognitoAuthSession) {
        final tokens = session.userPoolTokensResult.value;

        if (tokens.accessToken.raw.isEmpty ||
            tokens.idToken.raw.isEmpty ||
            tokens.refreshToken.isEmpty) {
          throw Exception('Token kh√¥ng h·ª£p l·ªá sau khi ƒëƒÉng nh·∫≠p');
        }

        safePrint(
            'Access Token: ${tokens.accessToken.raw.substring(0, 20)}...');
        safePrint('ID Token: ${tokens.idToken.raw.substring(0, 20)}...');

        // L∆∞u token m·ªõi
        await saveTokens(
            tokens.accessToken.raw, tokens.idToken.raw, tokens.refreshToken);

        safePrint('ƒê√£ l∆∞u token m·ªõi th√†nh c√¥ng');

        // L·∫•y v√† l∆∞u th√¥ng tin ng∆∞·ªùi d√πng
        await _fetchAndSaveUserInfo();

        // B·∫Øt ƒë·∫ßu refresh token timer
        _startRefreshTokenTimer();

        _authStateController.add(AuthState.authenticated);
        _pendingCallbackUrl = null;

        // Chuy·ªÉn h∆∞·ªõng v·ªÅ m√†n h√¨nh ch√≠nh
        if (navigatorKey.currentContext != null) {
          Navigator.pushNamedAndRemoveUntil(
            navigatorKey.currentContext!,
            '/home',
            (route) => false,
          );
        }
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y session sau khi ƒëƒÉng nh·∫≠p');
      }
    } catch (e) {
      safePrint('L·ªói khi x·ª≠ l√Ω callback URL: $e');
      _authStateController.add(AuthState.error);

      // N·∫øu c√≥ l·ªói, ƒëƒÉng xu·∫•t ƒë·ªÉ l√†m s·∫°ch tr·∫°ng th√°i
      await signOut();

      // Chuy·ªÉn h∆∞·ªõng v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      if (navigatorKey.currentContext != null) {
        Navigator.pushNamedAndRemoveUntil(
          navigatorKey.currentContext!,
          '/login',
          (route) => false,
        );
      }
    }
  }

  // X·ª≠ l√Ω deep link
  Future<void> handleDeepLink(Uri uri) async {
    try {
      safePrint('B·∫Øt ƒë·∫ßu x·ª≠ l√Ω deep link: $uri');
      if (uri.scheme == 'slchess') {
        safePrint('Scheme h·ª£p l·ªá: slchess');
        if (uri.host == 'callback') {
          safePrint('Host l√† callback, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω callback URL');
          // X·ª≠ l√Ω callback URL
          await handleCallbackUrl(uri.toString());
        } else if (uri.host == 'signout') {
          safePrint('Host l√† signout, b·∫Øt ƒë·∫ßu ƒëƒÉng xu·∫•t');
          // X·ª≠ l√Ω signout URL
          await signOut();
        } else if (uri.host == 'cancel') {
          safePrint('Host l√† cancel, h·ªßy ƒëƒÉng nh·∫≠p');
          // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy ƒëƒÉng nh·∫≠p
          _authStateController.add(AuthState.cancelled);
          if (navigatorKey.currentContext != null) {
            Navigator.pushNamedAndRemoveUntil(
              navigatorKey.currentContext!,
              '/login',
              (route) => false,
            );
          }
        } else {
          safePrint('Host kh√¥ng h·ª£p l·ªá: ${uri.host}');
        }
      } else {
        safePrint('Scheme kh√¥ng h·ª£p l·ªá: ${uri.scheme}');
      }
    } catch (e) {
      safePrint('L·ªói khi x·ª≠ l√Ω deep link: $e');
      _authStateController.add(AuthState.error);
    }
  }

  // B·∫Øt ƒë·∫ßu timer ƒë·ªÉ refresh token
  void _startRefreshTokenTimer() {
    // H·ªßy timer c≈© n·∫øu c√≥
    _refreshTokenTimer?.cancel();

    // Thi·∫øt l·∫≠p timer m·ªõi ƒë·ªÉ refresh token tr∆∞·ªõc khi h·∫øt h·∫°n 5 ph√∫t
    _refreshTokenTimer =
        Timer.periodic(const Duration(minutes: 55), (timer) async {
      try {
        await _refreshToken();
      } catch (e) {
        safePrint('L·ªói khi refresh token: $e');
        // N·∫øu kh√¥ng th·ªÉ refresh token, ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
        await signOut();
      }
    });
  }

  // Refresh token
  Future<void> _refreshToken() async {
    try {
      final refreshToken = await _storage.read(key: REFRESH_TOKEN_KEY);
      if (refreshToken == null) {
        throw Exception('Kh√¥ng t√¨m th·∫•y refresh token');
      }

      // G·ªçi API refresh token
      final result = await Amplify.Auth.fetchAuthSession();
      if (result is CognitoAuthSession) {
        final tokens = result.userPoolTokensResult.value;

        // L∆∞u token m·ªõi
        await _storage.write(
            key: ACCESS_TOKEN_KEY, value: tokens.accessToken.raw);
        await _storage.write(key: ID_TOKEN_KEY, value: tokens.idToken.raw);
        await _storage.write(
            key: REFRESH_TOKEN_KEY, value: tokens.refreshToken);

        safePrint('ƒê√£ refresh token th√†nh c√¥ng');
      }
    } catch (e) {
      safePrint('L·ªói khi refresh token: $e');
      rethrow;
    }
  }

  // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c signOut ƒë·ªÉ h·ªßy refresh token timer
  Future<void> signOut() async {
    try {
      // H·ªßy refresh token timer
      _refreshTokenTimer?.cancel();
      _refreshTokenTimer = null;

      // X√≥a token v√† th√¥ng tin ng∆∞·ªùi d√πng
      await _storage.delete(key: ACCESS_TOKEN_KEY);
      await _storage.delete(key: ID_TOKEN_KEY);
      await _storage.delete(key: REFRESH_TOKEN_KEY);
      await _userService.clearUserData();

      // ƒêƒÉng xu·∫•t m√† kh√¥ng chuy·ªÉn h∆∞·ªõng
      // await Amplify.Auth.signOut(
      //   options: const SignOutOptions(
      //     globalSignOut: false,
      //   ),
      // );

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      _authStateController.add(AuthState.unauthenticated);

      // Chuy·ªÉn th·∫≥ng v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      if (navigatorKey.currentContext != null) {
        Navigator.pushNamedAndRemoveUntil(
          navigatorKey.currentContext!,
          '/login',
          (route) => false,
        );
      }
    } catch (e) {
      safePrint('L·ªói ƒëƒÉng xu·∫•t: $e');
      // N·∫øu c√≥ l·ªói, v·∫´n c·ªë g·∫Øng chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      if (navigatorKey.currentContext != null) {
        Navigator.pushNamedAndRemoveUntil(
          navigatorKey.currentContext!,
          '/login',
          (route) => false,
        );
      }
    }
  }

  Future<bool> isSignedIn() async {
    try {
      final session = await Amplify.Auth.fetchAuthSession();
      return session.isSignedIn;
    } catch (e) {
      return false;
    }
  }

  void navigateToHome() {
    Navigator.pushReplacementNamed(
      navigatorKey.currentContext!,
      '/home',
    );
  }

  Future<String?> getAccessToken() async {
    return _storage.read(key: ACCESS_TOKEN_KEY);
  }

  Future<String?> getIdToken() async {
    return _storage.read(key: ID_TOKEN_KEY);
  }

  Future<String?> getRefreshToken() async {
    return _storage.read(key: REFRESH_TOKEN_KEY);
  }

  // Ph∆∞∆°ng th·ª©c thay ƒë·ªïi m·∫≠t kh·∫©u
  Future<bool> changePassword(String oldPassword, String newPassword) async {
    try {
      await Amplify.Auth.updatePassword(
        oldPassword: oldPassword,
        newPassword: newPassword,
      );
      return true;
    } on AmplifyException catch (e) {
      safePrint('L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: ${e.message}');

      // X·ª≠ l√Ω l·ªói thi·∫øu quy·ªÅn
      if (e.message.contains('Access Token does not have required scopes')) {
        // Th√¥ng b√°o l·ªói r√µ r√†ng h∆°n
        throw Exception(
            'Kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i v·ªõi ƒë·∫ßy ƒë·ªß quy·ªÅn.');
      }

      throw Exception('L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: ${e.message}');
    } catch (e) {
      safePrint('L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªïi m·∫≠t kh·∫©u: $e');
      throw Exception('L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªïi m·∫≠t kh·∫©u: $e');
    }
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªïi m·∫≠t kh·∫©u th√¥ng qua ƒëƒÉng nh·∫≠p l·∫°i
  Future<bool> changePasswordWithReauthentication(
      BuildContext context, String oldPassword, String newPassword) async {
    try {
      // ƒêƒÉng xu·∫•t tr∆∞·ªõc ƒë·ªÉ l√†m m·ªõi token
      await signOut();

      // Hi·ªÉn th·ªã th√¥ng b√°o
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u')),
      );

      // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      Navigator.pushReplacementNamed(
        navigatorKey.currentContext!,
        '/login',
      );

      return false; // Ch∆∞a th·ª±c hi·ªán ƒë·ªïi m·∫≠t kh·∫©u
    } catch (e) {
      safePrint('L·ªói khi chu·∫©n b·ªã ƒë·ªïi m·∫≠t kh·∫©u: $e');
      throw Exception('L·ªói khi chu·∫©n b·ªã ƒë·ªïi m·∫≠t kh·∫©u: $e');
    }
  }

  // Ph∆∞∆°ng th·ª©c public ƒë·ªÉ l∆∞u token
  Future<void> saveTokens(
      String accessToken, String idToken, String refreshToken) async {
    await _storage.write(key: ACCESS_TOKEN_KEY, value: accessToken);
    await _storage.write(key: ID_TOKEN_KEY, value: idToken);
    await _storage.write(key: REFRESH_TOKEN_KEY, value: refreshToken);
  }

  Future<String?> getCurrentUserId() async {
    try {
      final idToken = await getIdToken();
      if (idToken == null) return null;

      // Ph√¢n t√≠ch token JWT
      final parts = idToken.split('.');
      if (parts.length != 3) {
        safePrint('Token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JWT');
        return null;
      }

      // Gi·∫£i m√£ ph·∫ßn payload (ph·∫ßn th·ª© 2)
      String normalizedPayload = base64Url.normalize(parts[1]);
      final payloadJson = utf8.decode(base64Url.decode(normalizedPayload));
      final payload = jsonDecode(payloadJson);

      // L·∫•y sub (subject) t·ª´ payload - ƒë√¢y l√† ID c·ªßa ng∆∞·ªùi d√πng
      return payload['sub'] as String?;
    } catch (e) {
      safePrint('L·ªói khi l·∫•y ID ng∆∞·ªùi d√πng: $e');
      return null;
    }
  }

  // Dispose resources
  void dispose() {
    _refreshTokenTimer?.cancel();
    _authStateController.close();
  }
}
