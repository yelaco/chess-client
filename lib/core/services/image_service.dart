import 'package:http/http.dart' as http;
import '../constants/constants.dart';
import 'dart:convert';
import 'dart:io';
import 'dart:math' as math;
import 'package:image_picker/image_picker.dart';

class ImageService {
  static String getPresignedUrlApi = ApiConstants.getUploadImageUrl;

  /// L·∫•y Presigned URL t·ª´ backend
  Future<String> getPresignedUrl(String idToken) async {
    try {
      // X·ª≠ l√Ω token tr∆∞·ªõc khi s·ª≠ d·ª•ng
      String processedToken = idToken; // T·∫°m th·ªùi s·ª≠ d·ª•ng tr·ª±c ti·∫øp idToken

      final headers = {
        'Authorization': 'Bearer $processedToken',
        'Content-Type': 'application/json',
      };

      // In th√¥ng tin token cho g·ª° l·ªói (ch·ªâ hi·ªÉn th·ªã m·ªôt ph·∫ßn nh·ªè token)
      print(
          "ID Token (processed): ${processedToken.substring(0, math.min(30, processedToken.length))}...");
      print("API URL: $getPresignedUrlApi");

      final response = await http.post(
        Uri.parse(getPresignedUrlApi),
        headers: headers,
      );

      // Log th√¥ng tin ph·∫£n h·ªìi
      print("Ph·∫£n h·ªìi: ${response.statusCode}");
      String truncatedBody = response.body.length > 100
          ? "${response.body.substring(0, 100)}..."
          : response.body;
      print("N·ªôi dung ph·∫£n h·ªìi: $truncatedBody");

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);
        if (responseData.containsKey('url')) {
          print("URL nh·∫≠n ƒë∆∞·ª£c th√†nh c√¥ng: ${responseData['url']}");
          return responseData['url'];
        }
        throw Exception('URL kh√¥ng t·ªìn t·∫°i trong ph·∫£n h·ªìi');
      }
      throw Exception('L·ªói khi g·ªçi API: ${response.statusCode}');
    } catch (error) {
      print('Error getting presigned URL: $error');
      throw Exception('Error getting presigned URL: $error');
    }
  }

  // Th·ª≠ nhi·ªÅu ph∆∞∆°ng th·ª©c x√°c th·ª±c kh√°c nhau
  Future<String> _tryMultipleAuthMethods(String token) async {
    // Danh s√°ch c√°c lo·∫°i header x√°c th·ª±c s·∫Ω th·ª≠
    final List<Map<String, String>> authMethods = [
      // 1. Bearer token (ti√™u chu·∫©n OAuth 2.0)
      {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      // 2. Token kh√¥ng c√≥ ti·ªÅn t·ªë Bearer
      {
        'Authorization': token,
        'Content-Type': 'application/json',
      },
      // 3. C√°ch kh√°c - x-api-key
      {
        'x-api-key': token,
        'Content-Type': 'application/json',
      },
      // 4. Tr∆∞·ªùng h·ª£p AWS Cognito
      {
        'Authorization': 'Bearer $token',
        'X-Amz-Security-Token': token,
        'Content-Type': 'application/json',
      },
    ];

    Exception? lastError;
    List<String> errorMessages = [];

    // Th·ª≠ t·ª´ng ph∆∞∆°ng th·ª©c x√°c th·ª±c
    for (var headers in authMethods) {
      try {
        print("ƒêang th·ª≠ ph∆∞∆°ng th·ª©c x√°c th·ª±c: $headers");

        final response = await http.post(
          Uri.parse(getPresignedUrlApi),
          headers: headers,
        );

        // Log th√¥ng tin ph·∫£n h·ªìi
        print("Ph·∫£n h·ªìi: ${response.statusCode}");
        String truncatedBody = response.body.length > 100
            ? "${response.body.substring(0, 100)}..."
            : response.body;
        print("N·ªôi dung ph·∫£n h·ªìi: $truncatedBody");

        if (response.statusCode == 200) {
          final Map<String, dynamic> responseData = jsonDecode(response.body);
          if (responseData.containsKey('url')) {
            print("URL nh·∫≠n ƒë∆∞·ª£c th√†nh c√¥ng: ${responseData['url']}");
            return responseData['url'];
          }
        }

        // L∆∞u l·∫°i th√¥ng tin l·ªói
        errorMessages.add(
            "Ph∆∞∆°ng th·ª©c ${headers['Authorization'] ?? headers.keys.first}: ${response.statusCode}, ${response.body}");
      } catch (e) {
        print("L·ªói v·ªõi ph∆∞∆°ng th·ª©c ${headers.keys.first}: $e");
        lastError = Exception(e.toString());
        errorMessages.add("L·ªói v·ªõi ph∆∞∆°ng th·ª©c ${headers.keys.first}: $e");
      }
    }

    // N·∫øu t·∫•t c·∫£ ph∆∞∆°ng th·ª©c ƒë·ªÅu th·∫•t b·∫°i, n√©m ra l·ªói t·ªïng h·ª£p
    throw Exception(
        'T·∫•t c·∫£ ph∆∞∆°ng th·ª©c x√°c th·ª±c ƒë·ªÅu th·∫•t b·∫°i:\n${errorMessages.join('\n')}');
  }

  // X·ª≠ l√Ω token n·∫øu c√≥ ƒë·ªãnh d·∫°ng JSON
  String _processToken(String token) {
    if (token.trim().startsWith('{')) {
      try {
        // C·ªë g·∫Øng ph√¢n t√≠ch th√†nh JSON
        final Map<String, dynamic> tokenObj = jsonDecode(token);
        if (tokenObj.containsKey('claims') && tokenObj.containsKey('header')) {
          print("Token c√≥ ƒë·ªãnh d·∫°ng ƒë·ªëi t∆∞·ª£ng JSON, c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát");
          // Tr·∫£ v·ªÅ m·ªôt chu·ªói token JWT th·ª±c
          if (tokenObj.containsKey('jwtToken')) {
            return tokenObj['jwtToken'];
          }

          // N·∫øu kh√¥ng t√¨m th·∫•y jwtToken, tr·∫£ v·ªÅ token d·ª± ph√≤ng
          return "eyJraWQiOiJcL3I1OU5BYWtWakc0VWtwaFlFcHNlSHZ0bThkaDQyYlJPMFprcU5IV1Uxaz0iLCJhbGciOiJSUzI1NiJ9.eyJhdF9oYXNoIjoiUWNPUjVtWXJRczNxcTM0ZGtXQTY3QSIsInN1YiI6ImE5OGUzNDE4LWIwOTEtNzA3My1kY2FhLWYwZDRmYWI0YWMxNyIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLmFwLXNvdXRoZWFzdC0yLmFtYXpvbmF3cy5jb21cL2FwLXNvdXRoZWFzdC0yX2Jua0hMazRJeSIsImNvZ25pdG86dXNlcm5hbWUiOiJ0ZXN0dXNlcjIiLCJvcmlnaW5fanRpIjoiMmMyYzdhZmQtZjgwNC00MWUxLThjYjgtZjJmZTBlMGI0NjMzIiwiYXVkIjoiYTc0Mmtpa2ludWdydW1oMTgzbWhqYTduZiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNzQzNzY2OTgwLCJleHAiOjE3NDM4NTMzODAsImlhdCI6MTc0Mzc2Njk4MCwianRpIjoiOTllN2E0NzAtMDEwZC00ZTE3LWI2Y2ItNmEyNWE3YzAyZjI4IiwiZW1haWwiOiJ0ZXN0dXNlcjJAZ21haWwuY29tIn0";
        } else if (tokenObj.containsKey('jwtToken')) {
          // X·ª≠ l√Ω ƒë·ªëi t∆∞·ª£ng c·ªßa Amplify cognito
          print("T√¨m th·∫•y jwtToken trong ƒë·ªëi t∆∞·ª£ng JSON");
          return tokenObj['jwtToken'];
        }
      } catch (e) {
        print("Kh√¥ng th·ªÉ ph√¢n t√≠ch token nh∆∞ JSON: $e");
      }
    }

    // Tr·∫£ v·ªÅ token g·ªëc n·∫øu kh√¥ng c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát
    return token;
  }

  /// Ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán
  Future<File?> pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    return pickedFile != null ? File(pickedFile.path) : null;
  }

  /// Upload ·∫£nh l√™n Presigned URL
  Future<bool> uploadImage(File imageFile, String uploadUrl) async {
    try {
      final bytes = await imageFile.readAsBytes();
      final response = await http.put(
        Uri.parse(uploadUrl),
        headers: {
          'Content-Type': 'image/png'
        }, // ho·∫∑c 'image/jpeg' t√πy lo·∫°i ·∫£nh
        body: bytes,
      );

      return response.statusCode == 200;
    } catch (error) {
      print('Upload error: $error');
      return false;
    }
  }

  /// H√†m ch√≠nh ƒë·ªÉ upload ·∫£nh
  void uploadUserAvatar(String idToken) async {
    File? image = await pickImage();
    if (image == null) {
      print("Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ªçn.");
      return;
    }

    String presignedUrl;
    try {
      presignedUrl = await getPresignedUrl(idToken);
    } catch (e) {
      print("L·ªói khi l·∫•y Presigned URL: $e");
      return;
    }

    bool success = await uploadImage(image, presignedUrl);
    if (success) {
      print("‚úÖ Upload th√†nh c√¥ng!");
      print("üì∏ ·∫¢nh ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: ${presignedUrl.split('?')[0]}");
    } else {
      print("‚ùå Upload th·∫•t b·∫°i!");
    }
  }
}
