import 'package:flutter_slchess/core/models/user.dart';
import 'package:http/http.dart' as http;
import 'package:hive/hive.dart';
import '../constants/constants.dart';
import '../models/puzzle_model.dart';
import '../services/user_service.dart';
import 'dart:convert';

// L·ªõp ƒë·ªÉ l∆∞u tr·ªØ Profile trong b·ªô nh·ªõ thay v√¨ s·ª≠ d·ª•ng Hive
class ProfileStorage {
  // Singleton
  static final ProfileStorage _instance = ProfileStorage._internal();
  factory ProfileStorage() => _instance;
  ProfileStorage._internal();

  // Map ƒë·ªÉ l∆∞u profile theo userId
  final Map<String, Map<String, dynamic>> _profiles = {};

  // L∆∞u profile
  void saveProfile(String userId, int rating, {int dailyCount = 0}) {
    _profiles[userId] = {
      'userId': userId,
      'rating': rating,
      'dailyPuzzleCount': dailyCount,
      'lastPlayDate': DateTime.now().toIso8601String(),
    };
    print(
        "ƒê√£ l∆∞u profile v√†o b·ªô nh·ªõ: userId=$userId, rating=$rating, count=$dailyCount");
  }

  // L·∫•y profile
  PuzzleProfile? getProfile(String userId) {
    final profileMap = _profiles[userId];
    if (profileMap == null) return null;

    return PuzzleProfile(
      userId: profileMap['userId'],
      rating: profileMap['rating'],
      dailyPuzzleCount: profileMap['dailyPuzzleCount'],
      lastPlayDate: DateTime.tryParse(profileMap['lastPlayDate']),
    );
  }

  // X√≥a profile
  void deleteProfile(String userId) {
    _profiles.remove(userId);
    print("ƒê√£ x√≥a profile t·ª´ b·ªô nh·ªõ: $userId");
  }

  // X√≥a t·∫•t c·∫£ profile
  void clearAllProfiles() {
    _profiles.clear();
    print("ƒê√£ x√≥a t·∫•t c·∫£ profile t·ª´ b·ªô nh·ªõ");
  }
}

class PuzzleService {
  static String getPuzzlesUrlApi = ApiConstants.getPulzzesUrl;
  static String getPuzzleUrlApi = ApiConstants.getPulzzeUrl;
  static String getPuzzleProfileUrlApi = "${ApiConstants.getPulzzeUrl}/profile";

  // S·ª≠ d·ª•ng ProfileStorage
  final ProfileStorage _profileStorage = ProfileStorage();

  Future<Puzzles> getPuzzles(String idToken, {int limit = 10}) async {
    try {
      final response = await http.get(
        Uri.parse("$getPuzzlesUrlApi?limit=$limit"),
        headers: {'Authorization': idToken},
      );

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);
        final puzzles = Puzzles.fromJson(responseData);

        // ‚úÖ L∆∞u cache sau khi fetch
        await _cachePuzzles(puzzles.puzzles);

        return puzzles;
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y puzzles: ${response.statusCode}');
      }
    } catch (error) {
      print("L·ªói khi g·ªçi API, th·ª≠ l·∫•y t·ª´ cache...");

      // ‚úÖ N·∫øu l·ªói, load t·ª´ cache
      final cached = await _getCachedPuzzles();
      if (cached.isNotEmpty) {
        return Puzzles(puzzles: cached);
      }

      throw Exception('Kh√¥ng th·ªÉ l·∫•y puzzle: $error');
    }
  }

  // üß† Cache puzzles
  Future<void> _cachePuzzles(List<Puzzle> puzzles) async {
    final box = await Hive.openBox<Puzzle>('puzzleBox');
    await box.clear(); // optional: xo√° c≈©
    for (var puzzle in puzzles) {
      await box.put(puzzle.puzzleId, puzzle);
    }
  }

  // üì¶ L·∫•y puzzle t·ª´ cache n·∫øu c·∫ßn
  Future<List<Puzzle>> _getCachedPuzzles() async {
    final box = await Hive.openBox<Puzzle>('puzzleBox');
    return box.values.toList();
  }

  // üîë L·∫•y 1 puzzle t·ª´ cache, n·∫øu kh√¥ng c√≥ th√¨ g·ªçi API v√† t·∫°o l·∫°i cache
  Future<Puzzles> getPuzzleFromCacheOrApi(String idToken) async {
    try {
      // Ki·ªÉm tra xem Hive ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
      if (!Hive.isBoxOpen('puzzleBox')) {
        // ƒê·∫£m b·∫£o Hive ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi m·ªü box
        try {
          await Hive.openBox<Puzzle>('puzzleBox');
        } catch (e) {
          print("L·ªói khi m·ªü Hive box: $e");
          // N·∫øu kh√¥ng th·ªÉ m·ªü box, g·ªçi API ƒë·ªÉ l·∫•y puzzles
          return await getPuzzles(idToken);
        }
      }

      final box = await Hive.openBox<Puzzle>('puzzleBox');

      if (box.isNotEmpty) {
        final cachedPuzzles = box.values.toList();
        return Puzzles(puzzles: cachedPuzzles);
      }

      // N·∫øu kh√¥ng c√≥ trong cache, g·ªçi API ƒë·ªÉ l·∫•y puzzles
      print("Kh√¥ng t√¨m th·∫•y trong cache, g·ªçi API ƒë·ªÉ l·∫•y puzzle...");
      final puzzles = await getPuzzles(idToken);
      return puzzles;
    } catch (error) {
      print("L·ªói khi l·∫•y puzzle t·ª´ cache ho·∫∑c API: $error");
      // Th·ª≠ g·ªçi API tr·ª±c ti·∫øp n·∫øu c√≥ l·ªói v·ªõi cache
      try {
        return await getPuzzles(idToken);
      } catch (apiError) {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y puzzle: $error. L·ªói API: $apiError');
      }
    }
  }

  Future<void> deletePuzzleFromCache(Puzzle puzzle) async {
    final String puzzleId = puzzle.puzzleId;
    try {
      final box = await Hive.openBox<Puzzle>('puzzleBox');
      await box.delete(puzzleId); // X√≥a puzzle theo puzzleId

      print("Puzzle v·ªõi ID: $puzzleId ƒë√£ b·ªã x√≥a kh·ªèi cache.");
    } catch (error) {
      print("L·ªói khi x√≥a puzzle kh·ªèi cache: $error");
      throw Exception('Kh√¥ng th·ªÉ x√≥a puzzle kh·ªèi cache: $error');
    }
  }

  // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ ki·ªÉm tra v√† l∆∞u profile m·ªôt c√°ch an to√†n
  Future<void> safeStoreProfile(String userId, int rating,
      {int dailyCount = 0}) async {
    try {
      print(
          "T·∫°o profile m·ªõi m·ªôt c√°ch an to√†n: userId=$userId, rating=$rating, count=$dailyCount");

      // L∆∞u v√†o b·ªô nh·ªõ thay v√¨ Hive
      _profileStorage.saveProfile(userId, rating, dailyCount: dailyCount);
    } catch (e) {
      print("L·ªói khi l∆∞u profile an to√†n: $e");
    }
  }

  // L·∫•y profile t·ª´ b·ªô nh·ªõ
  Future<PuzzleProfile?> getProfileFromCache(String userId) async {
    try {
      return _profileStorage.getProfile(userId);
    } catch (e) {
      print("L·ªói khi l·∫•y profile t·ª´ cache: $e");
      return null;
    }
  }

  // S·ª≠a ph∆∞∆°ng th·ª©c n√†y ƒë·ªÉ s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c l∆∞u an to√†n
  Future<PuzzleProfile> getPuzzleProfile(String idToken) async {
    try {
      final response = await http.get(
        Uri.parse(getPuzzleProfileUrlApi),
        headers: {'Authorization': 'Bearer $idToken'},
      );

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);

        // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu tr∆∞·ªùng ƒë√≥ kh√¥ng t·ªìn t·∫°i ho·∫∑c null
        final userId = responseData['userId'] ?? '';
        final rating = responseData['rating'] ?? 300;

        // T·∫°o PuzzleProfile m·ªõi ƒë·ªÉ tr·∫£ v·ªÅ
        final puzzleProfile = PuzzleProfile(
          userId: userId,
          rating: rating,
          dailyPuzzleCount: responseData['dailyPuzzleCount'] ?? 0,
          lastPlayDate: DateTime.tryParse(responseData['lastPlayDate'] ?? '') ??
              DateTime.now(),
        );

        // L∆∞u profile v√†o cache m·ªôt c√°ch an to√†n
        try {
          await safeStoreProfile(userId, rating);
        } catch (e) {
          print("L·ªói khi l∆∞u puzzle profile v√†o cache: $e");
        }

        return puzzleProfile;
      }
      throw Exception('Kh√¥ng th·ªÉ l·∫•y profile puzzle: ${response.statusCode}');
    } catch (e) {
      print("L·ªói khi l·∫•y puzzle profile: $e");

      // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ profile m·∫∑c ƒë·ªãnh
      final userService = UserService();
      final user = await userService.getPlayer();
      if (user != null) {
        return PuzzleProfile(
          userId: user.id,
          rating: 300,
          dailyPuzzleCount: 0,
          lastPlayDate: DateTime.now(),
        );
      }
      rethrow;
    }
  }

  // S·ª≠a ph∆∞∆°ng th·ª©c savePuzzleProfile ƒë·ªÉ s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c l∆∞u an to√†n
  Future<void> savePuzzleProfile(PuzzleProfile puzzleProfile) async {
    try {
      await safeStoreProfile(puzzleProfile.userId, puzzleProfile.rating,
          dailyCount: puzzleProfile.dailyPuzzleCount ?? 0);
    } catch (e) {
      print("L·ªói khi l∆∞u puzzle profile: $e");
    }
  }

  Future<int> getPuzzleRatingFromCache(UserModel user) async {
    try {
      final cachedProfile = await getProfileFromCache(user.id);
      if (cachedProfile != null) {
        return cachedProfile.rating;
      }
      return 0; // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
    } catch (e) {
      print("L·ªói khi l·∫•y puzzle rating t·ª´ cache: $e");
      return 0;
    }
  }

  Future<PuzzleProfile> getPuzzleRatingFromCacheOrAPI(String idToken) async {
    try {
      // L·∫•y t·ª´ API tr·ª±c ti·∫øp
      print("Fetching puzzle profile from API...");
      final apiProfile = await getPuzzleProfile(idToken);
      return apiProfile;
    } catch (error) {
      print("Error getting puzzle profile: $error");

      // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ profile m·∫∑c ƒë·ªãnh
      final userService = UserService();
      final user = await userService.getPlayer();
      if (user != null) {
        return PuzzleProfile(
          userId: user.id,
          rating: 300,
          dailyPuzzleCount: 0,
          lastPlayDate: DateTime.now(),
        );
      }

      throw Exception("Kh√¥ng th·ªÉ l·∫•y puzzle profile: $error");
    }
  }

  /// Clears all puzzle-related cached data
  /// Call this when a new user logs in
  Future<void> clearAllPuzzleCaches() async {
    try {
      // Clear puzzle profiles from memory
      _profileStorage.clearAllProfiles();

      // Clear puzzles list
      if (Hive.isBoxOpen('puzzleBox')) {
        final puzzleBox = await Hive.openBox<Puzzle>('puzzleBox');
        await puzzleBox.clear();
        print("Puzzles cache cleared");
      }
    } catch (error) {
      print("Error clearing puzzle caches: $error");
    }
  }

  Future<bool> canPlayPuzzle(String idToken) async {
    try {
      final userService = UserService();
      final user = await userService.getPlayer();
      if (user == null) {
        throw Exception("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
      }

      final puzzleProfile = await getPuzzleRatingFromCacheOrAPI(idToken);

      // N·∫øu user l√† premium, lu√¥n cho ph√©p ch∆°i
      if (user.membership == Membership.premium ||
          user.membership == Membership.pro) {
        return true;
      }

      // Ki·ªÉm tra s·ªë l·∫ßn ch∆°i trong ng√†y
      puzzleProfile.resetDailyCount(); // ƒê·∫£m b·∫£o reset counter n·∫øu l√† ng√†y m·ªõi
      return puzzleProfile.dailyPuzzleCount <
          3; // Gi·ªõi h·∫°n 3 l·∫ßn cho ng∆∞·ªùi d√πng th∆∞·ªùng
    } catch (e) {
      print("L·ªói khi ki·ªÉm tra quy·ªÅn ch∆°i puzzle: $e");
      return false;
    }
  }

  Future<void> incrementPuzzleCount(String idToken) async {
    try {
      final userService = UserService();
      final user = await userService.getPlayer();
      if (user == null) {
        throw Exception("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
      }

      try {
        // L·∫•y profile t·ª´ API ho·∫∑c cache
        final puzzleProfile = await getPuzzleRatingFromCacheOrAPI(idToken);

        // TƒÉng s·ªë l·∫ßn ch∆°i puzzle v√† l∆∞u l·∫°i
        final currentCount = puzzleProfile.dailyPuzzleCount ?? 0;
        await safeStoreProfile(puzzleProfile.userId, puzzleProfile.rating,
            dailyCount: currentCount + 1);

        print("ƒê√£ tƒÉng s·ªë l·∫ßn ch∆°i puzzle: ${currentCount + 1}");
      } catch (e) {
        // N·∫øu c√≥ l·ªói, t·∫°o profile m·ªõi v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
        await safeStoreProfile(user.id, 300, dailyCount: 1);
        print("ƒê√£ t·∫°o profile m·ªõi v·ªõi s·ªë l·∫ßn ch∆°i puzzle: 1");
      }
    } catch (e) {
      print("L·ªói khi c·∫≠p nh·∫≠t s·ªë l·∫ßn ch∆°i puzzle: $e");
    }
  }

  Future<int?> solvedPuzzle(String idToken, Puzzle puzzle) async {
    try {
      final solvedPuzzleUrlApi = "$getPuzzleUrlApi/${puzzle.puzzleId}/solved";

      final response = await http.post(
        Uri.parse(solvedPuzzleUrlApi),
        headers: {'Authorization': 'Bearer $idToken'},
      );

      print("Ph·∫£n h·ªìi t·ª´ API khi gi·∫£i puzzle: ${response.body}");

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        final newRating = responseData['newRating'];
        print("ƒêi·ªÉm Puzzle Rating m·ªõi c·ªßa b·∫°n sau khi gi·∫£i: $newRating");

        // Get the current user
        final userService = UserService();
        final user = await userService.getPlayer();

        if (user != null) {
          // L∆∞u tr·ª±c ti·∫øp profile m·ªõi v·ªõi rating m·ªõi
          await safeStoreProfile(user.id, newRating);
          print(
              "ƒê√£ c·∫≠p nh·∫≠t puzzle profile: userId=${user.id}, rating=$newRating");

          // X√≥a puzzle ƒë√£ gi·∫£i kh·ªèi cache
          await deletePuzzleFromCache(puzzle);

          // Tr·∫£ v·ªÅ rating m·ªõi
          return newRating;
        }
      } else {
        print(
            "L·ªói khi g·ªçi API solved puzzle: ${response.statusCode}, ${response.body}");
        throw Exception(
            'Kh√¥ng th·ªÉ ƒë√°nh d·∫•u puzzle ƒë√£ gi·∫£i: ${response.statusCode}');
      }

      print("ƒê√£ ƒë√°nh d·∫•u puzzle ${puzzle.puzzleId} l√† ƒë√£ gi·∫£i th√†nh c√¥ng");
      return null;
    } catch (error) {
      print("L·ªói khi ƒë√°nh d·∫•u puzzle ƒë√£ gi·∫£i: $error");
      throw Exception('Kh√¥ng th·ªÉ ƒë√°nh d·∫•u puzzle ƒë√£ gi·∫£i: $error');
    }
  }

  Future<void> updatePuzzleRating(
      int newRating, PuzzleProfile puzzleProfile) async {
    try {
      await safeStoreProfile(puzzleProfile.userId, newRating,
          dailyCount: puzzleProfile.dailyPuzzleCount ?? 0);
      print(
          "Profile rating ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: userId=${puzzleProfile.userId}, rating=$newRating");
    } catch (e) {
      print("L·ªói khi c·∫≠p nh·∫≠t puzzle rating: $e");
    }
  }

  Future<void> deletePuzzleProfile(String userId) async {
    try {
      _profileStorage.deleteProfile(userId);
    } catch (e) {
      print("L·ªói khi x√≥a puzzle profile: $e");
    }
  }
}
